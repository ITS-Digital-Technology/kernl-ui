//
// Mixins
// * Typography, Grid, Media Queries, Misc


//
// Typography

@mixin type-root($colorContrast: false) {
  line-height: 1.5;

  @include mqbp-up(xs) { font-size: 15px; }
  @include mqbp-up(sm) { font-size: 16px; }
  @include mqbp-up(xl) { font-size: 17px; }
  @include mqbp-up(xx) { font-size: 18px; }

  @if $colorContrast { opacity: 0.54; }
}

@mixin type-d1($colorContrast: false, $important: false) {
  @if ($important) {
    $important: ' !important';
  } @else {
    $important: '';
  }

  line-height: 1.4;
  font-size: $fs-d1#{$important};

  @if $colorContrast { opacity: 0.54; }
}

@mixin type-d2($colorContrast: false, $important: false) {
  @if ($important) {
    $important: ' !important';
  } @else {
    $important: '';
  }

  line-height: 1.4;
  font-size: $fs-d2#{$important};

  @if $colorContrast { opacity: 0.54; }
}

@mixin type-d3($colorContrast: false, $important: false) {
  @if ($important) {
    $important: ' !important';
  } @else {
    $important: '';
  }

  line-height: 1.4;
  font-size: $fs-d3#{$important};

  @if $colorContrast { opacity: 0.54; }
}

@mixin type-d4($colorContrast: false, $important: false) {
  @if ($important) {
    $important: ' !important';
  } @else {
    $important: '';
  }

  line-height: 1.4;
  font-size: $fs-d4#{$important};

  @if $colorContrast { opacity: 0.54; }
}

@mixin type-d5($colorContrast: false, $important: false) {
  @if ($important) {
    $important: ' !important';
  } @else {
    $important: '';
  }

  line-height: 1.4;
  font-size: $fs-d5#{$important};

  @if $colorContrast { opacity: 0.54; }
}

@mixin type-d6($colorContrast: false, $important: false) {
  @if ($important) {
    $important: ' !important';
  } @else {
    $important: '';
  }

  line-height: 1.05;
  font-size: $fs-d6#{$important};
  letter-spacing: -0.05rem;

  @if $colorContrast { opacity: 0.54; }
}

@mixin type-d7($colorContrast: false, $important: false) {
  @if ($important) {
    $important: ' !important';
  } @else {
    $important: '';
  }

  letter-spacing: -0.04rem;
  line-height: 1;
  font-size: $fs-d7#{$important};
  letter-spacing: -0.05rem;

  @if $colorContrast { opacity: 0.54; }
}

@mixin type-lead($colorContrast: false, $important: false) {
  @if ($important) {
    $important: ' !important';
  } @else {
    $important: '';
  }

  line-height: 1.35;
  font-weight: $type-regular;
  font-size: $fs-d2#{$important};

  @if $colorContrast { opacity: 0.75; }
}

@mixin type-sm($colorContrast: false, $important: false) {
  @if ($important) {
    $important: ' !important';
  } @else {
    $important: '';
  }

  line-height: 1.35#{$important};
  font-size: $fs-sm#{$important};

  @if $colorContrast { opacity: 0.54; }
}

@mixin type-xs($colorContrast: false, $important: false) {
  @if ($important) {
    $important: ' !important';
  } @else {
    $important: '';
  }

  line-height: 1.3;
  font-size: $fs-xs#{$important};

  @if $colorContrast { opacity: 0.54; }
}

// List Unstyled
@mixin list_unstyled() {
  padding-left: 0;
  list-style: none;
}

// Font Smoothing / Antialiased
@mixin font_smoothing() {
  @media
    (-webkit-min-device-pixel-ratio: 2),
    (min-resolution: 192dpi) {
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }
}


//
// Grid

@mixin make-grid-columns($columns: $grid-columns, $gutters: $grid-gutter-widths, $breakpoints: $grid-breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    @include make-gutters($gutters);
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: _breakpoint-infix($breakpoint, $breakpoints);
    $i: 0;

    @include mqbp-up($breakpoint, $breakpoints) {
      @for $i from 1 through $columns {
        .#{$col-prefix}-#{$i}\@#{$infix} {
          @include make-col($i, $columns);
        }
      }

      @each $modifier in (pull, push, order) {
        @for $i from 0 through $columns {
          .#{$col-prefix}-#{$i}-#{$modifier}\@#{$infix} {
            @include make-col-modifier($modifier, $i, $columns)
          }
        }
      }

      // for one-fifth-width columns
      @for $i from 1 through 5 {
        .#{$col-prefix}-20\@#{$infix} {
          flex-basis: 20%;
          max-width: 20%;
        }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($infix == "" and $i == 0) { // Avoid emitting useless .--offset-0@xs
          .#{$col-prefix}-#{$i}-offset\@#{$infix} {
            @include make-col-modifier(offset, $i, $columns)
          }
        }
      }
    }
  }
}

@mixin make-section($gutters: $grid-gutter-widths, $container: "contain") {
  position: relative;
  margin-right: auto;
  margin-left: auto;

  @each $breakpoint in map-keys($gutters) {
    @include mqbp-up($breakpoint) {
      $gutter: map-get($gutters, $breakpoint);

      @if ($container == "flush") {
        padding: $gutter;
      } @elseif ($container == "contain") {
        padding: $gutter 10%;
      } @else {
        padding: $gutter ($gutter * 2);
      }
    }
  }
}

@mixin make-gutters($gutters: $grid-gutter-widths) {
  @each $breakpoint in map-keys($gutters) {
    @include mqbp-up($breakpoint) {
      $gutter: map-get($gutters, $breakpoint);
      padding-right: ($gutter / 2);
      padding-left:  ($gutter / 2);
    }
  }
}

@mixin make-row($gutters: $grid-gutter-widths) {
  display: flex;
  flex-wrap: wrap;

  @each $breakpoint in map-keys($gutters) {
    @include mqbp-up($breakpoint) {
      $gutter: map-get($gutters, $breakpoint);
      margin-right: ($gutter / -2);
      margin-left:  ($gutter / -2);
    }
  }
}

@mixin make-col($size, $columns: $grid-columns) {
  flex-basis: percentage($size / $columns);
  max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  margin-left: percentage($size / $columns);
}

@mixin make-col-push($size, $columns: $grid-columns) {
  left: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-pull($size, $columns: $grid-columns) {
  right: if($size > 0, percentage($size / $columns), auto);
}

@mixin make-col-order($size, $columns: $grid-columns) {
  order: if($size >= 0, $size, auto);
}

@mixin make-col-modifier($type, $size, $columns) {
  // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
  @if $type == push {
    @include make-col-push($size, $columns);
  } @else if $type == pull {
    @include make-col-pull($size, $columns);
  } @else if $type == order {
    @include make-col-order($size, $columns);
  } @else if $type == offset {
    @include make-col-offset($size, $columns);
  }
}

// Masthead
@mixin make-masthead($gutters: $grid-gutter-widths) {
  @each $breakpoint in map-keys($gutters) {
    @include mqbp-up($breakpoint) {
      $gutter: map-get($gutters, $breakpoint);
      margin-right: $gutter;
      margin-left:  $gutter;
    }
  }
}

// Mega menu
// give megamenu same spacing as masthead;
// same as make-row, but with padding and full gutter width
@mixin make-megamenu($gutters: $grid-gutter-widths, $container: "contain") {
  display: flex;
  flex-wrap: wrap;

  @each $breakpoint in map-keys($gutters) {
    @include mqbp-up($breakpoint) {
      $gutter: map-get($gutters, $breakpoint);

      @if ($container == "flush") {
        padding-right: $gutter !important;
        padding-left:  $gutter !important;
      } @elseif ($container == "contain") {
        padding-right: 10% !important;
        padding-left:  10% !important;
      } @else {
        padding-right: $gutter * 2 !important;
        padding-left:  $gutter * 2 !important;
      }
    }
  }
}


//
// Media Queries

// Media of at least the minimum breakpoint width
@mixin mqbp-up($name, $breakpoints: $grid-breakpoints) {
  $min: _breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
@mixin mqbp-down($name, $breakpoints: $grid-breakpoints) {
  $max: _breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}


//
// Miscellaneous

// Clearfix
@mixin clearfix() {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}


// Sizing
@mixin size($width, $height) {
  width: $width;
  height: $height;
}

@mixin square($size) {
  @include size($size, $size);
}


// Color generation

@mixin get_component($component, $color, $color_hover, $color_grade: false, $color_text: null) {
  @if $component == 'bg' { @include bg_variant($color, $color_hover, $color_text); }
  @if $component == 'bc' { @include border_variant($color, $color_hover, $color_text); }
  @if $component == 'tc' { @include text_variant($color); }
}

@mixin generate_colors($component, $palette_collection: $palette) {
  // Loop through each palette collection and then each color set
  @each $palette_label, $palette_colors in $palette_collection {
    @each $current_color, $current_hover, $current_variant, $current_text in $palette_colors {

      $delimiter: '--';

      // checks to see if color has a variant
      // if false: make color the component's base
      // if true: append grade to class
      @if ($current_variant == false) {
        .#{$component}#{$delimiter}#{$palette_label} {
          @include get_component($component, $current_color, $current_hover, false, $current_text);
        }
      } @else {
        .#{$component}#{$delimiter}#{$palette_label}-#{$current_variant} {
          @include get_component($component, $current_color, $current_hover, $current_variant, $current_text);
        }
      }
    }
  }
}
