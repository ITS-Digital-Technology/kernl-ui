// Components
// Variables
//

// set component padding to complement grid gutter spacing
@mixin component-padding($y-multiple: 1, $x-multiple: 1, $margin-bottom: 1, $gutters: $gutters) {
  padding: 1rem;
  @each $breakpoint in map-keys($gutters) {
    @include mqbp-up($breakpoint) {
      $gutter: map-get($gutters, $breakpoint);

      @if ($y-multiple == $x-multiple) {
        padding: ($gutter * $y-multiple);
      } @else {
        padding: ($gutter * $y-multiple) ($gutter * $x-multiple);
      }
    }
  }
}

// set component margin-bottom to complement grid gutter spacing
@mixin component-margin($margin-bottom: 1, $gutters: $gutters) {
  @each $breakpoint in map-keys($gutters) {
    @include mqbp-up($breakpoint) {
      $gutter: map-get($gutters, $breakpoint);
      margin-bottom: ($gutter * $margin-bottom);
    }
  }
}

// Accordions
@mixin accordion_variant($color: $type-color, $trigger: rgba(0,0,0,0.05), $background: transparent) {
  > .__item > .__title {
    background: $trigger;

    &:after { color: rgba($color, 0.5); }

    &.collapsed {
      &:after { color: $color; }
    }
  }

  .__copy {
    color: $color;
    background: $background;
  }
}

// List Groups
@mixin list_group_variant($color: inherit, $background: transparent, $striped: rgba(255, 255, 255, 0.1)) {
  background: $background;

  > .__item,
  > li,
  > div { border-color: rgba($color, 0.25); }

  &.\--striped .__item,
  &.\--striped > li {
    border: 0 none;

    &:nth-child(odd) { background-color: $striped; }
  }

  &.\+outline { border: 1px solid rgba($color, 0.25); }

  &.\+indent:not(.\--striped):not(.\+outline):not(.\+shadow) {
    > .__item,
    > li {
      &:hover { background-color: rgba($color, 0.05); }
    }
  }
}

// Masthead
/* @mixin make-masthead($container: "default", $gutters: $gutters, $contain: $contain-width) {
  @each $breakpoint in map-keys($gutters) {
    @include mqbp-up($breakpoint) {
      $gutter: map-get($gutters, $breakpoint);
      @if ($container == "full") {
        @if ($breakpoint == "t" or $breakpoint == "d" or $breakpoint == "w") {
          .__logo { margin-left: $gutter; }

          .__drawer,
          .__toggler,
          .\--utility { margin-right: $gutter; }
        }
      } @elseif ($container == "contain") {
        @if ($breakpoint == "t") {
          .__logo { margin-left: $contain; }

          .__drawer,
          .__toggler,
          .\--utility { margin-right: $contain; }
        }
      } @else {
        @if ($breakpoint == "t" or $breakpoint == "d" or $breakpoint == "w") {
          .__logo { margin-left: ($gutter * 2); }

          .__drawer,
          .__toggler,
          .\--utility { margin-right: ($gutter * 2); }
        } @else {
          .__logo { margin-left: $gutter; }

          .__drawer,
          .__toggler,
          .\--utility { margin-right: $gutter; }
        }
      }
    }
  }
} */

// Mega menu
// give megamenu same spacing as masthead;
// same as make-row, but with padding and full gutter width
/* @mixin make-megamenu($container: "default", $gutters: $gutters, $contain: $contain-width) {
  @each $breakpoint in map-keys($gutters) {
    @include mqbp-up($breakpoint) {
      $gutter: map-get($gutters, $breakpoint);
      @if ($container == "full") {
        @if ($breakpoint == "t" or $breakpoint == "d" or $breakpoint == "w") {
          padding-right: $gutter !important;
          padding-left:  $gutter !important;
        }
      } @elseif ($container == "contain") {
        @if ($breakpoint == "t") {
          padding-right: $contain !important;
          padding-left: $contain !important;
        }
      } @else {
        @if ($breakpoint == "t" or $breakpoint == "d" or $breakpoint == "w") {
          padding-right: $gutter * 2 !important;
          padding-left:  $gutter * 2 !important;
        } @else {
          padding-right: $gutter;
          padding-left:  $gutter;
        }
      }
    }
  }
} */


//
// Card mixins

// Card Variant
/* @mixin card_variant($color: $type-color, $background: rgba(255, 255, 255, 1)) {
  color: $color;
  background: $background;
  border-color: $background;

  .__body,
  .__footer,
  .list-group .__item { border-color: darken($background, 20%); }

  .__footer { background: $background; }
} */

// set image and text side by side
@mixin card_horizontal($width_graphic: 100%, $width_text: auto) {
  .__graphic {
    width: $width_graphic;
    height: 100%;
    padding: 0;
  }

  .__graphic__img {
    max-width: none;
    height: 100%;
    top: -10rem;
    bottom: -10rem;
    left: -10rem;
    right: -10rem;
  }

  .__body {
    position: absolute;
    width: $width_text;
    left: $width_graphic;
    top: 0;
    height: 100%;
  }

  &:after,
  .__graphic + .__header {
    width: $width_graphic;
    left: $width_graphic;
  }

  .__graphic + .__header {
    top: 0;
  }

  .__footer {
    right: 0;
    left: $width_graphic;
    width: $width_text;
  }

  .__link {
    padding-bottom: 0;

    &:after {
      width: $width_text;
    }
  }

  &.\--right {
    .__graphic {
      margin-left: $width_graphic;
    }

    .__body {
      left: auto;
      right: $width_graphic;
    }

    &:after,
    .__graphic + .__header {
      left: auto;
      right: $width_graphic;
    }

    .__footer {
      left: 0;
      right: $width_graphic;
    }
  }
}

// reset card_horizontal back to stacked when necessary;
// required for cases like .g-6@t.g-3@d
@mixin card_vertical() {
  .__graphic {
    width: 100%;
    height: 0;
    padding: 56.25% 0 0;
  }

  .__graphic__img {
    max-width: 110%;
    width: auto;
    height: auto;
    top: 0;
    bottom: 0;
    left: -5%;
    right: 0;
  }

  .__body {
    position: relative;
    width: auto;
    left: auto;
    top: auto;
    height: auto;
  }

  .__graphic + .__header { left: 0; }

  .__header { top: auto; }

  .__header,
  .__footer {
    right: auto;
    left: auto;
    width: 100%;
  }

  .__header + .__body { padding-top: 1rem; }
}

@mixin fill_width() {
  .__graphic__img {
    width: 110%;
    height: auto;
  }
}

@mixin fill_height() {
  .__graphic__img {
    width: auto;
    height: 100%;
  }
}
